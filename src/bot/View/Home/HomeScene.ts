import { Composer, Scenes } from "telegraf";
import { ExtraReplyMessage } from "telegraf/typings/telegram-types";
import UserConrtoller from "../../Controller/User/UserController";
import { MyContext } from "../../Model";
import IUser from "../../Model/User/IUserModel";
require("dotenv").config();

let partials: Array<string> = ["alphabet", "soundsAndLetters", "wordFormation", "partsOfSpeech", "cases", "verbs", "sentences", "negation", "home"]

const handler = new Composer<MyContext>();
const home = new Scenes.WizardScene(
    "home",
    handler,
    async (ctx) => await select_gender(ctx)
);

async function select_gender (ctx: MyContext) {
    try {
        if (ctx.updateType == 'callback_query') {
            await UserConrtoller.update_gender(ctx)
            ctx.answerCbQuery()
            await greeting(ctx)
            ctx.wizard.selectStep(1)
        }
    } catch (err) {
        // err
    }
}

export function greeting(ctx: MyContext) {

    const extra = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–°–∞–º–æ—É—á–∏—Ç–µ–ª—å", callback_data: "study" },
                    { text: "–°–ª–æ–≤–∞—Ä—å", callback_data: "vocabular" }
                ],
                [{ text: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', callback_data: 'translater' }],
                [{ text: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: "dashboard" }]
            ]
        }
    }
    
    let message = `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`

    // @ts-ignore
    return ctx.update["message"] ? ctx.reply(message, extra) : ctx.editMessageText(message, extra)
}

home.start(async (ctx) => {
    try {
        await UserConrtoller.save_user(ctx)
        await UserConrtoller.check_gender(ctx)
            .then(async (user: IUser) => {

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ–ª
                if (!user.male) {

                    ctx.wizard.next()

                    let message = `–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª`
                    let extra: ExtraReplyMessage = {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ú—É–∂—á–∏–Ω–∞',
                                        callback_data: 'male'
                                    },
                                    {
                                        text: '–ñ–µ–Ω—â–∏–Ω–∞',
                                        callback_data: 'female'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å',
                                        callback_data: 'later'
                                    }
                                ]
                            ]
                        }
                    }

                    await ctx.reply(message, extra)
                } else {
                    await greeting(ctx)
                }
            })


    } catch (err) {
        // err
    }
})

home.enter((ctx) => greeting(ctx))
handler.action(/./, async (ctx) => {
    // ctx.answerCbQuery()

    if (ctx.updateType == 'callback_query') {

        let callback_data = ctx.update['callback_query']['data']
        console.log(callback_data)
        if (callback_data == 'study') {

            return ctx.scene.enter('study')

        }

        if (callback_data == 'dashboard') {

            return ctx.scene.enter('dashboard')

        }

        if (callback_data == 'vocabular') {
            return ctx.scene.enter("vocabular")
        }


        ctx.answerCbQuery(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üîê`)

    }

})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö
handler.on("message", async (ctx) => greeting(ctx))

export default home